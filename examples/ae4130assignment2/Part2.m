clear
close all

%% Set parameters for Xfoil calculation
% Velocity, chord and kinematic viscosity are fictitious parameters used to
% set the Reynolds number
iter = 40;
referenceVelocity = 5e5; % [m/s]
referenceChord = 1; % [m]
referenceNu = 1;    % [m^2/s]
nPanels = 320;
alphaLimit = [-2,10];

%% Generate NACA 3409 object
naca3409 = XfoilAirfoil(struct('type','NACA',...
    'digit','3409',...
    'iter',iter,...
    'referenceVelocity',referenceVelocity,...
    'referenceChord',referenceChord,...
    'referenceNu',referenceNu,...
    'nPanels',nPanels,...
    'alphaLimit',alphaLimit));

%% Plot airfoil geometry
figure
naca3409.plotAirfoil('titleFlag',false);

%% Plot viscous vs inviscid cp vs x/c
figure
alphaLaminarBubbleAnalysis = 4;
[hLineViscous,hLineInviscid] = naca3409.plotCpXcViscousInviscid(...
    'alfa',alphaLaminarBubbleAnalysis,'titleFlag',false);
% Set right y-axis
hold on
yyaxis right
ax = gca;
% Generate vector of n-factor
nFactorVector = linspace(4,12,3);
% Retrieve standard colors for lines in plot
c = lines;
% Change color to right y-axis
ax.YColor = c(length(nFactorVector)+2,:);
% Calculate boundary layer parameters and plot results
alpha4BlParametersStruct = naca3409.calculateBl(...
    alphaLaminarBubbleAnalysis);
cfXcBottomSideCurve = plot([alpha4BlParametersStruct.xc],...
    [alpha4BlParametersStruct.cfBottom],...
    ':','color',c(length(nFactorVector)+2,:));
cfXcTopSideCurve = plot([alpha4BlParametersStruct.xc],...
    [alpha4BlParametersStruct.cfTop],...
    '-','color',c(length(nFactorVector)+2,:));
% Improve plot appearance
plotSpecificationStruct = struct(...
    'txtYlabel','$C_f$',...
    'lineHandleVector',...
    [hLineViscous,hLineInviscid,cfXcBottomSideCurve,cfXcTopSideCurve],...
    'legendArray',...
    {{'Viscous $C_p$','Inviscid $C_p$',...
    '$C_f$ bottom side','$C_f$ top side'}});
makePlotNicer(plotSpecificationStruct)

%% Investigate effect of n on laminar separation bubble
% Generate figure and axes for cp vs x/c plot
figure
% Generate subplots for cp and cf vs xc
[ha,~] = tight_subplot(2,1,.04,.15,.1);
% Set axes for cp plot
cpXcLaminarBubbleAnalysisAxes = ha(1);
cpXcLaminarBubbleAnalysisAxes.YDir = 'reverse';
hold(cpXcLaminarBubbleAnalysisAxes,'on')
% Set axes for cf plot
cfXcLaminarBubbleAnalysisAxes = ha(2);
hold(cfXcLaminarBubbleAnalysisAxes,'on')
% Iterate through the different values of n-factor
for i=length(nFactorVector):-1:1
    % Update n-factor
    naca3409.Ncrit = nFactorVector(i);
    % Save lift and drag coefficients
    clLaminarBubbleAnalysis(i) = naca3409.Polar(...
        [naca3409.Polar.alpha]==alphaLaminarBubbleAnalysis).cl;
    cdLaminarBubbleAnalysis(i) = naca3409.Polar(...
        [naca3409.Polar.alpha]==alphaLaminarBubbleAnalysis).cd;
    % Calculate and plot cp vs x/c for the angle of attack given by 
    % alphaLaminarBubbleAnalysis
    alpha4CpStruct = naca3409.calculateCpXc(alphaLaminarBubbleAnalysis);
    plot(cpXcLaminarBubbleAnalysisAxes,...
        [alpha4CpStruct.xc],[alpha4CpStruct.cpBottom],...
        'color',c(i+1,:));
    cpXcCurveVector(i) = plot(cpXcLaminarBubbleAnalysisAxes,...
        [alpha4CpStruct.xc],[alpha4CpStruct.cpTop],...
        'color',c(i+1,:));
    % Calculate and plot cf vs x/c for the angle of attack given by 
    % alphaLaminarBubbleAnalysis
    alpha4BlParametersStruct = naca3409.calculateBl(...
        alphaLaminarBubbleAnalysis);
    plot(cfXcLaminarBubbleAnalysisAxes,[alpha4BlParametersStruct.xc],...
        [alpha4BlParametersStruct.cfBottom],...
        ':','color',c(i+1,:));
    cfXcCurveVector(i) = plot(...
        cfXcLaminarBubbleAnalysisAxes,[alpha4BlParametersStruct.xc],...
        [alpha4BlParametersStruct.cfTop],...
        '-','color',c(i+1,:));
    % Add name to legend array
    legendLaminarBubbleAnalysisArray{i} =...
        sprintf('$n=%.1f$',nFactorVector(i));
end
% Plot inviscid solution
naca3409.ViscousFlag = false;
alpha4CpStruct = naca3409.calculateCpXc(alphaLaminarBubbleAnalysis);
plot(cpXcLaminarBubbleAnalysisAxes,...
    [alpha4CpStruct.xc],[alpha4CpStruct.cpBottom],...
    'k--');
cpXcCurveVector(end+1) = plot(cpXcLaminarBubbleAnalysisAxes,...
    [alpha4CpStruct.xc],[alpha4CpStruct.cpTop],...
    'k--');
% Set axes of subplots
linkaxes([cpXcLaminarBubbleAnalysisAxes,cfXcLaminarBubbleAnalysisAxes],'x')
xticklabels(cfXcLaminarBubbleAnalysisAxes,'auto')
yticklabels(cfXcLaminarBubbleAnalysisAxes,'auto')
yticklabels(cpXcLaminarBubbleAnalysisAxes,'auto')
set(cpXcLaminarBubbleAnalysisAxes,'xlabel',[])
% Improve appearance of cp plot
plotSpecificationStruct = struct(...
    'targetAxes',cpXcLaminarBubbleAnalysisAxes,...
    'txtYlabel','$C_p$',...
    'lineHandleVector',cpXcCurveVector,...
    'legendArray',...
    {[legendLaminarBubbleAnalysisArray,'Inviscid calculation']});
makePlotNicer(plotSpecificationStruct)
% Improve appearance of cf plot
fullLineHandle = plot(cfXcLaminarBubbleAnalysisAxes,nan,nan,'k-');
dottedLineHandle = plot(cfXcLaminarBubbleAnalysisAxes,nan,nan,'k:');
plotSpecificationStruct = struct(...
    'targetAxes',cfXcLaminarBubbleAnalysisAxes,...
    'txtXlabel','$x/c$',...
    'txtYlabel','$C_f$',...
    'lineHandleVector',...
    [dottedLineHandle,fullLineHandle],...
    'legendArray',...
    {{'Bottom side','Top side'}});
makePlotNicer(plotSpecificationStruct)

%% Invesigate effect of forced transition
% Set 
naca3409.ViscousFlag = true;
naca3409.Ncrit = 9;
% naca3409.ReferenceVelocity = 1e5; % uncomment to run analysis at Re=10^5
% Set the lift coefficient for the forced transition analysis
clForcedTransitionAnalysis = 0.4;
% Calculate the draf coefficient and the transition point of the top side
% for the given lift coefficient
[~,~,cdrag,~,~,naturalTopXtr,~] = naca3409.oper(...
    'cl',clForcedTransitionAnalysis);
% Save
topXtrForcedTransitionAnalysis(1) = naturalTopXtr;
cdForcedTransitionAnalysis(1) = cdrag;
% Generate vector of n-factor
xcForcedTransitionVector = linspace(0,naturalTopXtr,4);
xcForcedTransitionVector = xcForcedTransitionVector(1:end-1);
% Generate figure and axes for cp vs x/c plot
figure
% Generate subplots for cp and cf vs xc
[ha,~] = tight_subplot(2,1,.04,.15,.1);
% Set axes for cp plot and plot viscous vs inviscid comparison
cpForcedTransitionAnalysisAxes = ha(1);
[hLineNaturalTransition,hLineInviscid] =...
    naca3409.plotCpXcViscousInviscid(...
    'cl',clForcedTransitionAnalysis,'titleFlag',false,...
    'targetAxes',cpForcedTransitionAnalysisAxes);
% Set axes for cf plot
cfForcedTransitionAnalysisAxes = ha(2);
hold(cfForcedTransitionAnalysisAxes,'on')
forcedTransitionBlParametersStruct = naca3409.calculateBl(...
    'cl',clForcedTransitionAnalysis);
plot(cfForcedTransitionAnalysisAxes,...
    [forcedTransitionBlParametersStruct.xc],...
    [forcedTransitionBlParametersStruct.cfBottom],...
    ':','color',c(1,:));
cfXcCurveVector(1) = plot(...
    cfForcedTransitionAnalysisAxes,...
    [forcedTransitionBlParametersStruct.xc],...
    [forcedTransitionBlParametersStruct.cfTop],...
    '-','color',c(1,:));
% Generate figure and axes for momentum thickness
figure
thetaForcedTransitionAnalysisAxes = axes;
hold(thetaForcedTransitionAnalysisAxes,'on')
plot(thetaForcedTransitionAnalysisAxes,...
    [forcedTransitionBlParametersStruct.xc],...
    [forcedTransitionBlParametersStruct.thetaBottom],...
    ':','color',c(1,:));
naturalTransitionThetaLine = plot(thetaForcedTransitionAnalysisAxes,...
    [forcedTransitionBlParametersStruct.xc],...
    [forcedTransitionBlParametersStruct.thetaTop],...
    '-','color',c(1,:));
% Itearte through the different values of forced transition locations
for i=length(xcForcedTransitionVector)+1:-1:2
    % Update n-factor
    naca3409.XtrTop = xcForcedTransitionVector(i-1);
    % Save lift and drag coefficients
    [~,~,cdrag,~,~,topXtr,~] = naca3409.oper(...
        'cl',clForcedTransitionAnalysis);
    topXtrForcedTransitionAnalysis(i) = topXtr;
    cdForcedTransitionAnalysis(i) = cdrag;
    % Calculate and plot cp vs x/c for the given lift coefficient
    forcedTransitionCpStruct = naca3409.calculateCpXc(...
        'cl',clForcedTransitionAnalysis);
    plot(cpForcedTransitionAnalysisAxes,...
        [forcedTransitionCpStruct.xc],...
        [forcedTransitionCpStruct.cpBottom],...
        'color',c(i,:));
    cpForcedTransitionCurveVector(i-1) = plot(...
        cpForcedTransitionAnalysisAxes,...
        [forcedTransitionCpStruct.xc],...
        [forcedTransitionCpStruct.cpTop],...
        'color',c(i,:));
    % Calculate boundary layer parameters for the given lift coefficient
    forcedTransitionBlParametersStruct = naca3409.calculateBl(...
        'cl',clForcedTransitionAnalysis);
    % Plot cf vs x/c
    plot(cfForcedTransitionAnalysisAxes,...
        [forcedTransitionBlParametersStruct.xc],...
        [forcedTransitionBlParametersStruct.cfBottom],...
        ':','color',c(i,:));
    plot(cfForcedTransitionAnalysisAxes,...
        [forcedTransitionBlParametersStruct.xc],...
        [forcedTransitionBlParametersStruct.cfTop],...
        '-','color',c(i,:));
    % Plot momentum thickness vs x/c
    plot(thetaForcedTransitionAnalysisAxes,...
        [forcedTransitionBlParametersStruct.xc],...
        [forcedTransitionBlParametersStruct.thetaBottom],...
        ':','color',c(i,:));
    thetaLineVector(i-1) = plot(thetaForcedTransitionAnalysisAxes,...
        [forcedTransitionBlParametersStruct.xc],...
        [forcedTransitionBlParametersStruct.thetaTop],...
        '-','color',c(i,:));
    % Add name to legend array
    legendForcedTransitionAnalysisArray{i-1} =...
        sprintf('$x_{tr,top}=%.2f$',xcForcedTransitionVector(i-1));
end
% Set axes of subplots
linkaxes([cpForcedTransitionAnalysisAxes,...
    cfForcedTransitionAnalysisAxes],'x')
xticklabels(cfForcedTransitionAnalysisAxes,'auto')
yticklabels(cfForcedTransitionAnalysisAxes,'auto')
yticklabels(cpForcedTransitionAnalysisAxes,'auto')
set(cpForcedTransitionAnalysisAxes,'xlabel',[])
% Make cp plot nicer
plotSpecificationStruct = struct(...
    'targetAxes',cpForcedTransitionAnalysisAxes,...
    'txtYlabel','$C_p$',...
    'lineHandleVector',[hLineNaturalTransition,hLineInviscid,...
    cpForcedTransitionCurveVector],...
    'legendArray',{['Free transition','Inviscid calculation',...
    legendForcedTransitionAnalysisArray]},...
    'legendLocation','southwest');
makePlotNicer(plotSpecificationStruct)
% Make cf plot nicer
plotSpecificationStruct = struct(...
    'targetAxes',cfForcedTransitionAnalysisAxes,...
    'txtXlabel','$x/c$',...
    'txtYlabel','$C_f$',...
    'lineHandleVector',[dottedLineHandle,fullLineHandle],...
    'legendArray',{{'Bottom side','Top side'}});
makePlotNicer(plotSpecificationStruct)
% Make theta plot nicer
plotSpecificationStruct = struct(...
    'targetAxes',thetaForcedTransitionAnalysisAxes,...
    'txtXlabel','$x/c$',...
    'txtYlabel','$\theta$',...
    'lineHandleVector',[naturalTransitionThetaLine,thetaLineVector,...
    dottedLineHandle,fullLineHandle],...
    'legendArray',{['Free transition',legendForcedTransitionAnalysisArray,...
    'Bottom side','Top side']},...
    'legendLocation','northwest');
makePlotNicer(plotSpecificationStruct)

%% Save figures
saveNiceFigure({'Naca3409ForcedTransitionTheta',...
    'Naca3409ForcedTransition','Naca3409CpXcAlpha4',...
    'Naca3409ViscousVsInviscidCpXc','Naca3409Geometry'});
